rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    /* ------------------------------------------------------------
       Helper functions
    ------------------------------------------------------------*/
    function isOrgAdmin(orgId) {
      // Permissions document ID convention: {userId}_{orgId}
      return request.auth != null &&
        exists(/databases/$(database)/documents/organization_permissions/$(request.auth.uid + "_" + orgId)) &&
        get(/databases/$(database)/documents/organization_permissions/$(request.auth.uid + "_" + orgId)).data.role in ["owner", "admin"];
    }

    // Prevent a node from being moved under itself or an immediate child. We
    // can only do limited checks in rules, so we guard against the most
    // obvious cycles: setting managerId to self OR to someone whose managerId
    // is the employee. Deeper cycle checks should be enforced client-side and
    // optionally in Cloud Functions.
    function isValidManagerChange(memberId, orgId) {
      let newManagerId = request.resource.data.managerId;

      // No change or remain top-level
      if (newManagerId == resource.data.managerId) {
        return true;
      }

      // Allow removing manager (move to root)
      if (newManagerId == null) {
        return true;
      }

      // Self-parenting not allowed
      if (newManagerId == memberId) {
        return false;
      }

      // New manager must exist & belong to same org
      return exists(/databases/$(database)/documents/members/$(newManagerId)) &&
        get(/databases/$(database)/documents/members/$(newManagerId)).data.organizationId == orgId &&
        // Immediate cycle check â€“ new manager's manager must not be the member
        (get(/databases/$(database)/documents/members/$(newManagerId)).data.managerId != memberId);
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Organizations collection
    match /organizations/{orgId} {
      // Allow authenticated users to create new organizations
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.ownerId;
      
      // Allow authenticated users to read for uniqueness checking (name field only)
      allow read: if request.auth != null;
      
      // Owner can do everything
      allow write, delete: if request.auth != null && 
        request.auth.uid == resource.data.ownerId;
    }
    
    // Members collection
    match /members/{memberId} {
      // ----- Create ----- //
      allow create: if request.auth != null &&
        isOrgAdmin(request.resource.data.organizationId);

      // ----- Read ----- //
      allow read: if request.auth != null &&
        isOrgAdmin(resource.data.organizationId);

      // ----- Update (including re-parent) ----- //
      allow update: if request.auth != null &&
        isOrgAdmin(resource.data.organizationId) &&
        // Ensure organizationId cannot be changed
        request.resource.data.organizationId == resource.data.organizationId &&
        // If managerId is changing, validate it doesn't create a cycle or self-parent
        isValidManagerChange(memberId, resource.data.organizationId);

      // ----- Delete ----- //
      allow delete: if request.auth != null &&
        isOrgAdmin(resource.data.organizationId);
    }
    
    // Organization permissions collection
    match /organization_permissions/{permissionId} {
      // Users can create their own permissions (for new orgs)
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      
      // Users can read their own permissions
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Organization owners can manage permissions
      allow read, write, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/organizations/$(resource.data.organizationId)) &&
        get(/databases/$(database)/documents/organizations/$(resource.data.organizationId)).data.ownerId == request.auth.uid;
    }
  }
} 